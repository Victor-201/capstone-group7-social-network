import { API_BASE_URL } from "../config/apiConfig";

const BASE_URL = `${API_BASE_URL}/user`;

// ƒê·ªïi avatar ho·∫∑c ·∫£nh b√¨a
export const changeUserImage = async (token, file, imageType) => {
  const formData = new FormData();
  formData.append("media", file);

  const response = await fetch(`${BASE_URL}/${imageType}`, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
    },
    body: formData,
  });

  const data = await response.json();

  if (!response.ok) {
    throw new Error(data.message || `HTTP ${response.status}`);
  }

  return data;
};

// ‚úÖ L·∫•y danh s√°ch ·∫£nh c·ªßa user theo userId
// L·∫•y danh s√°ch ·∫£nh c·ªßa user theo userId
export const getUserImages = async (token, userId) => {
  if (!token) throw new Error("Token kh√¥ng h·ª£p l·ªá.");
  if (!userId) throw new Error("Thi·∫øu userId.");

  const response = await fetch(`${BASE_URL}/photos/${userId}`, {
    method: "GET", // üëà B·ªï sung d√≤ng n√†y cho r√µ r√†ng
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  let data;
  try {
    data = await response.json();
  } catch {
    throw new Error("L·ªói khi ƒë·ªçc d·ªØ li·ªáu ·∫£nh.");
  }

  if (!response.ok) {
    throw new Error(data.message || `L·ªói server: ${response.status}`);
  }

  // ‚úÖ Tr∆∞·ªùng h·ª£p tr·∫£ v·ªÅ { images: [...] }
  if (data.images && Array.isArray(data.images)) {
    return data.images;
  }

  // ‚úÖ Tr∆∞·ªùng h·ª£p tr·∫£ v·ªÅ tr·ª±c ti·∫øp l√† m·∫£ng ·∫£nh
  if (Array.isArray(data)) {
    return data;
  }

  throw new Error("D·ªØ li·ªáu ·∫£nh kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.");
};
